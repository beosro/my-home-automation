#########################################################################
# Comfort
#
#  Configuration related to maintaining a comfortable environment in the
#  house.
#########################################################################

homeassistant:
  customize:
    weather.thermostat:
      hidden: true
    sensor.low_target:
      icon: mdi:format-vertical-align-bottom
    sensor.high_target:
      icon: mdi:format-vertical-align-top
    sensor.thermostat_temperature:
      friendly_name: Foyer Temperature
    sensor.avg_occupied_temp:
      icon: mdi:thermometer-lines

# Pull out target high and low temperatures from thermostat.
sensor:
  - platform: template
    sensors:
      low_target:
        friendly_name: "Minimum Temperature"
        unit_of_measurement: "°F"
        value_template: "{{states.climate.thermostat.attributes.target_temp_low}}"
      high_target:
        friendly_name: "Maximum Temperature"
        unit_of_measurement: "°F"
        value_template: "{{states.climate.thermostat.attributes.target_temp_high}}"
      avg_occupied_temp:
        friendly_name: "Average Occupied Room Temperature"
        unit_of_measurement: "°F"
        entity_id:
          - binary_sensor.bedroom_occupancy
          - binary_sensor.den_occupancy
          - binary_sensor.kitchen_occupancy
          - binary_sensor.thermostat_occupancy
          - sensor.bedroom_temperature
          - sensor.den_temperature
          - sensor.kitchen_temperature
          - sensor.thermostat_temperature
        value_template: >
          {% set rooms = ['bedroom', 'den', 'kitchen', 'thermostat'] %}
          {% macro get_temp() -%}
            {% for room in rooms -%}
              {%- if states.binary_sensor[room ~ "_occupancy"].state == "on" -%}
                {{-states.sensor[room ~ "_temperature"].state-}},
              {%- endif -%}
            {%- endfor -%}
          {%- endmacro %}
          {% set temps = (((get_temp()).split(",")|reject("eq", ""))|map('float'))|list %}
          {% if temps|sum > 0 %}
            {{(temps|sum/temps|length)|round}}
          {% else %}
            n/a
          {% endif %}

# Group temperatures from each monitored room for easy viewing.
group:
  Temperatures:
    - sensor.avg_occupied_temp
    - sensor.kitchen_temperature
    - sensor.den_temperature
    - sensor.bedroom_temperature
    - sensor.thermostat_temperature
    - sensor.high_target
    - sensor.low_target

# Set up thermostat.
ecobee:
  api_key: !secret ecobee_api_key

automation:

  # Turn off fans and turn on thermostat "away" mode after
  # everyone leaves the house.
  - alias: turn on away mode when everyone leaves
    trigger:
      - platform: state
        entity_id: group.tracked_people
        to: not_home
    condition:
      - condition: state
        entity_id: switch.guests
        state: 'off'
    action:
      - service: fan.turn_off
        entity_id: group.all_fans
      - service: climate.set_away_mode
        data:
          entity_id: climate.thermostat
          away_mode: true

  # Turn off thermostat "away" mode when anyone gets home.
  - alias: turn off away mode
    trigger:
      - platform: state
        entity_id: group.tracked_people
        to: home
    action:
      - service: climate.set_away_mode
        data:
          entity_id: climate.thermostat
          away_mode: false

  # Turn on the bedroom fan when the temperature exceeds
  # a threshold and we're sleeping.
  - alias: turn on fan while sleeping
    trigger:
      - platform: numeric_state
        entity_id: sensor.dark_sky_temperature
        above: 60
    condition:
      - condition: state
        entity_id: switch.sleeping
        state: 'on'
    action:
      - service: fan.turn_on
        entity_id: fan.zwave_fan_1_level
        data:
          speed: 'low'

  # Turn off the bedroom fan when the temperature goes below
  # a threshold and we're sleeping.
  - alias: turn off fan while sleeping
    trigger:
      - platform: numeric_state
        entity_id: sensor.dark_sky_temperature
        above: 60
    condition:
      - condition: state
        entity_id: switch.sleeping
        state: 'on'
    action:
      - service: fan.turn_off
        entity_id: fan.zwave_fan_1_level
